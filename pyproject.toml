[project]
name = "dcmr"
version = "1.0.0-alpha"
authors = [
    {name = "Neal W Morton", email = "mortonne@gmail.com"},
    {name = "Sean M. Polyn", email = "sean.polyn@vanderbilt.edu"}
]
description = "DCMR: Distributed Context Maintenance and Retrieval model"
readme = "README.md"
requires-python = ">=3.7"
keywords = ["modeling", "memory", "EEG"]
license = {text = "GPL-3.0-or-later"}
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Operating System :: OS Independent"
]
dependencies = [
    "numpy",
    "scipy",
    "pandas",
    "polars",
    "joblib",
    "matplotlib>=3.5",
    "seaborn",
    "scikit-image",
    "scikit-learn",
    "psifr",
    "cymr",
    "wikivector",
    "jinja2",
    "pingouin",
    "mpmath",
    "ezlaunch",
    "mindstorm",
    "watermark",
    "click",
    "pyarrow",
    "jupyterlab",
    "swarmbar",
]

[project.optional-dependencies]
docs = ["sphinx", "pydata-sphinx-theme", "ipython", "sphinx-click"]

[project.scripts]
dcmr_restricted_models = "dcmr.framework:print_restricted_models"
dcmr-fit = "dcmr.cli:fit_cmr"
dcmr-xval = "dcmr.cli:xval_cmr"
dcmr-sim = "dcmr.cli:sim_cmr"
dcmr-adjust-sim = "dcmr.cli:adjust_sim"
dcmr-join-xval = "dcmr.cli:join_xval"
dcmr-plot-fit = "dcmr.cli:run_plot_fit"
dcmr-plan-fit = "dcmr.batch:plan_fit_cmr"
dcmr-plan-xval = "dcmr.batch:plan_xval_cmr"
dcmr-plan-sim = "dcmr.batch:plan_sim_cmr"
dcmr-plan-plot-fit = "dcmr.batch:plan_plot_fit"
dcmr-decode-eeg = "dcmr.decode:decode_eeg"
dcmr-decode-context = "dcmr.decode:decode_context"
dcmr-patterns-cdcatfr2 = "dcmr.task:save_patterns_cdcatfr2"
dcmr-prepare-cdcatfr2 = "dcmr.task:prepare_cdcatfr2"
dcmr-convert-incidental = "dcmr.task:convert_matrix"
dcmr-prepare-asymfr = "dcmr.task:prepare_asymfr"
dcmr-prepare-incidental = "dcmr.task:prepare_incidental"
dcmr-fit-cfr-disrupt = "dcmr.cli:fit_cmr_cfr_disrupt"
dcmr-fit-cdcatfr2 = "dcmr.cli:fit_cmr_cdcatfr2"
dcmr-fit-incidental = "dcmr.cli:fit_cmr_incidental"
dcmr-fit-asymfr = "dcmr.cli:fit_cmr_asymfr"

[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"
